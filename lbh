#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Build helper for LLVM project.

import os
import sys
import argparse
import subprocess
import shutil
import shlex
import logging
import time
import copy


def InferCXX(cc):
    if cc.endswith('gcc'):
        return cc[:-len('gcc')] + 'g++'
    if cc.endswith('clang'):
        return cc[:-len('clang')] + 'clang++'
    raise Exception(f'Unrecognized compiler: {cc}')


def GetClangSearchDirs(clang, env=None):
    cmd = [
        clang,
        '-print-search-dirs',
    ]
    p = subprocess.run(cmd, capture_output=True, text=True, env=env)
    res = {}
    SEP = ': ='
    if p.returncode == 0:
        for line in p.stdout.splitlines():
            i = line.index(SEP)
            lhs = line[:i].strip()
            rhs = line[(i + len(SEP)):].strip()
            res[lhs] = rhs
    return res


def CPack(path, num_threads=1):
    cpack = shutil.which('cpack')
    if not cpack:
        logging.info("Can't find cpack in the system, won't pack.")
        return err
    cpack_cmd = [
        cpack,
        '-G',
        'TXZ',
        '-D',
        f'CPACK_THREADS={num_threads}',
    ]
    cp = subprocess.run(cpack_cmd, cwd=path)
    if cp.returncode != 0:
        logging.error(f"Can't pack with {cpack_cmd}")
    return cp.returncode


class Builder(object):

    def __init__(
        self,
        monorepo=None,
        build_dir=None,
        install_prefix=None,
        cmake=shutil.which('cmake'),
        ninja=shutil.which('ninja'),
        build_type='Release',
        cc=None,
        cxx=None,
        ld=None,
        cflags=[],
        cxxflags=[],
        ldflags=[],
        projects=[],
        runtimes=[],
        extra_cmake_flags=[],
        config_only=False,
        njobs=os.cpu_count(),
        ninja_targets=[],
        use_malloc=None,
        enable_asserts=True,
        env={},
    ):
        assert monorepo
        assert build_dir
        self.cmake = cmake
        self.ninja = ninja
        self.monorepo = os.path.abspath(monorepo)
        self.build_dir = os.path.abspath(build_dir)
        self.install_prefix = os.path.abspath(
            install_prefix) if install_prefix else None
        self.cc = os.path.abspath(cc) if cc else None
        self.cxx = os.path.abspath(cxx) if cxx else None
        self.ld = os.path.abspath(ld) if ld else None
        self.cflags = cflags
        self.cxxflags = cxxflags
        self.ldflags = ldflags
        self.projects = projects
        self.runtimes = runtimes
        self.extra_cmake_flags = extra_cmake_flags
        self.ninja_targets = ninja_targets
        self.build_type = build_type
        self.config_only = config_only
        self.njobs = njobs
        self.use_malloc = use_malloc
        self.enable_asserts = enable_asserts
        self.env = env

    def BuildCMakeCommand(self):
        cmake_command = [
            self.cmake,
            '-GNinja',
            f'-DCMAKE_MAKE_PROGRAM={self.ninja}',
            '-DLLVM_ENABLE_BINDINGS=OFF',
            '-DLLVM_ENABLE_ASSERTIONS={}'.format(
                'TRUE' if self.enable_asserts else 'FALSE'),
            f'-DCMAKE_BUILD_TYPE={self.build_type}',
        ]
        if self.install_prefix:
            cmake_command.append(
                f'-DCMAKE_INSTALL_PREFIX={self.install_prefix}')
        if self.use_malloc:
            self.ldflags.append(f'-l{self.use_malloc}')
        if self.cc:
            cmake_command.append(f'-DCMAKE_C_COMPILER={self.cc}')
        if self.cxx:
            cmake_command.append(f'-DCMAKE_CXX_COMPILER={self.cxx}')
        # GCC doesn't support -fuse-ld yet.
        if self.ld and not self.cc.endswith('gcc'):
            cmake_command.append(f'-DLLVM_USE_LINKER={self.ld}')
        if self.cflags:
            cmake_command.append('-DCMAKE_C_FLAGS={}'.format(
                shlex.join(self.cflags)))
        if self.cxxflags:
            cmake_command.append('-DCMAKE_CXX_FLAGS={}'.format(
                shlex.join(self.cxxflags)))
        if self.projects:
            cmake_command.append('-DLLVM_ENABLE_PROJECTS={}'.format(';'.join(
                self.projects)))
        if self.runtimes:
            cmake_command.append('-DLLVM_ENABLE_RUNTIMES={}'.format(';'.join(
                self.runtimes)))
        if self.ldflags:
            cmake_command.append('-DCMAKE_EXE_LINKER_FLAGS={}'.format(
                shlex.join(self.ldflags)))
            cmake_command.append('-DCMAKE_SHARED_LINKER_FLAGS={}'.format(
                shlex.join(self.ldflags)))
        cmake_command.extend(self.extra_cmake_flags)
        return cmake_command

    # Implicitly reset runtimes.
    def ConfigAndBuildProjects(self):
        self.runtimes = []
        return self.ConfigAndBuild()

    # Implicitly reset projects.
    def ConfigAndBuildRuntimes(self):
        self.projects = []
        err = self.config(os.path.join(self.monorepo, 'runtimes'),
                          self.build_dir)
        if err != 0:
            return err
        return self.Build()

    def config(self, src_dir, build_dir):
        cmake_command = self.BuildCMakeCommand()
        cmake_command.extend(['-S', src_dir])
        cmake_command.extend(['-B', build_dir])
        env = os.environ.copy()
        env.update(self.env)
        err = subprocess.call(cmake_command, env=env)
        if err != 0:
            logging.error(f'cmake failed: {cmake_command}')
        return err

    def ConfigAndBuild(self):
        err = self.Config()
        if self.config_only or err != 0:
            return err
        return self.Build()

    def Config(self):
        return self.config(os.path.join(self.monorepo, 'llvm'), self.build_dir)

    def Build(self):
        ninja_command = [
            self.ninja,
            '-j%d' % self.njobs,
        ]
        ninja_command.extend(self.ninja_targets)
        env = os.environ.copy()
        env.update(self.env)
        err = subprocess.call(ninja_command, cwd=self.build_dir, env=env)
        if err != 0:
            logging.error(f'ninja failed: {ninja_command}')
        return err


def AddCommonArguments(parser):
    parser.add_argument('--monorepo', required=True)
    parser.add_argument('--build_dir', required=True)
    parser.add_argument('--install_prefix')
    parser.add_argument('--config_only', action='store_true', default=False)
    parser.add_argument('-j', dest='njobs', type=int, default=os.cpu_count())
    parser.add_argument('--use_malloc', default=None)
    parser.add_argument('--cmake_binary', default=shutil.which('cmake'))
    parser.add_argument('--ninja_binary', default=shutil.which('ninja'))


def BuildProduct(config):
    extra_cmake_flags = []
    if config.dylib:
        extra_cmake_flags.append('-DLLVM_LINK_LLVM_DYLIB=TRUE')
    if config.binutils_include:
        extra_cmake_flags.append(
            f'-DLLVM_BINUTILS_INCDIR={config.binutils_include}')
    if config.default_llvm_toolchain:
        # All in llvm's toolchain.
        extra_cmake_flags.append('-DCLANG_DEFAULT_PIE_ON_LINUX=TRUE')
        extra_cmake_flags.append('-DCLANG_DEFAULT_LINKER=lld')
        extra_cmake_flags.append('-DCLANG_DEFAULT_RTLIB=compiler-rt')
        extra_cmake_flags.append('-DCLANG_DEFAULT_UNWINDLIB=libunwind')
        extra_cmake_flags.append('-DCLANG_DEFAULT_CXX_STDLIB=libc++')
        extra_cmake_flags.append('-DCLANG_DEFAULT_OBJCOPY=llvm-objcopy')
        extra_cmake_flags.append('-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp')
        extra_cmake_flags.append('-DLIBCXX_USE_COMPILER_RT=TRUE')
        extra_cmake_flags.append('-DLIBCXXABI_USE_COMPILER_RT=TRUE')
        extra_cmake_flags.append('-DLIBUNWIND_USE_COMPILER_RT=TRUE')
        extra_cmake_flags.append('-DLIBCXXABI_USE_LLVM_UNWINDER=TRUE')
    # FIXUP openmp.
    # extra_cmake_flags.append('-DLIBOMP_LIBFLAGS=-lm')
    # extra_cmake_flags.append('-DOPENMP_ENABLE_LIBOMPTARGET=FALSE')

    # Use at risk, since atomic in compiler-rt will be statically linked against.
    if config.enable_rt_atomic:
        extra_cmake_flags.append('-DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=FALSE')
    else:
        extra_cmake_flags.append(
            '-DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC=TRUE')
    if config.lto:
        extra_cmake_flags.append('-DLLVM_ENABLE_LTO=Thin')
    cflags = ['-pipe']
    cxxflags = ['-pipe']
    if config.native:
        cflags.append('-march=native')
        cxxflags.append('-march=native')
    builder = Builder(
        config.monorepo,
        config.build_dir,
        config.install_prefix,
        cc=config.clang,
        cxx=InferCXX(config.clang),
        cflags=cflags,
        cxxflags=cxxflags,
        ld=config.lld,
        config_only=config.config_only,
        extra_cmake_flags=extra_cmake_flags,
        njobs=config.njobs,
        use_malloc=config.use_malloc,
        enable_asserts=not config.no_asserts,
    )
    builder.runtimes = []
    if config.minimal:
        builder.projects = [
            'clang',
            'clang-tools-extra',
            'lld',
            'compiler-rt',
        ]
    else:
        builder.projects = [
            'clang',
            'clang-tools-extra',
            'lld',
            'lldb',
            'mlir',
            'polly',
            'compiler-rt',
            'openmp',
        ]
        # See https://reviews.llvm.org/D126905.
        builder.runtimes.extend([
            'libunwind',
            'libcxx',
            'libcxxabi',
        ])
    err = builder.Config()
    if err != 0:
        return err
    err = builder.Build()
    if err != 0:
        return err
    return CPack(config.build_dir, config.njobs)


def BuildForDev(options):
    extra_cmake_flags = []
    runtimes = []
    if options.build_shared_libs:
        extra_cmake_flags.append('-DBUILD_SHARED_LIBS=YES')
    if options.build_runtimes:
        runtimes.extend([
            'compiler-rt',
            'libunwind',
        ])
        if options.build_rt_atomic:
            extra_cmake_flags.append(
                '-DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=FALSE')
        else:
            extra_cmake_flags.append(
                '-DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC=TRUE')
    projects = options.projects.split(';')
    builder = Builder(
        options.monorepo,
        options.build_dir,
        options.install_prefix,
        cmake=options.cmake_binary,
        build_type=options.build_type,
        cc=options.clang,
        cxx=InferCXX(options.clang),
        ld=options.lld,
        cflags=['-pipe'],
        cxxflags=['-pipe'],
        extra_cmake_flags=extra_cmake_flags,
        config_only=options.config_only,
        projects=projects,
        runtimes=runtimes,
        use_malloc=options.use_malloc,
    )
    return builder.ConfigAndBuild()


# https://www.douban.com/note/835674433/?_i=99072274iOHVLN.
def Bootstrap(config):
    if config.stage < 0 or config.stage > 3:
        config.stage = 3
    cc = config.stage0_cc
    cxx = InferCXX(cc)
    ld = config.stage0_ld
    builders = [None]
    runtimes = [
        'compiler-rt',
        'libcxx',
        'libcxxabi',
        'libunwind',
    ]
    cflags = ['-pipe']
    cxxflags = ['-pipe']
    if config.native:
        cflags.append('-march=native')
        cxxflags.append('-march=native')
    # CMake does not set the -fpic option when building static libraries.
    # See https://github.com/gabime/spdlog/issues/1405.
    extra_cmake_flags = ['-DCMAKE_POSITION_INDEPENDENT_CODE=On']
    if config.llvm_dylib:
        extra_cmake_flags.append('-LLVM_BUILD_LLVM_DYLIB=On')
    env = {}
    for i in range(1, config.stage + 1):
        stage_dir = os.path.join(os.path.abspath(config.build_dir),
                                 f'stage{i}')
        stage_build_dir = os.path.join(stage_dir, 'build')
        stage_install_dir = os.path.join(stage_dir, 'install')
        os.makedirs(stage_build_dir, exist_ok=True)
        os.makedirs(stage_install_dir, exist_ok=True)
        stage_cflags = cflags[:]
        stage_cxxflags = cxxflags[:]
        stage_ldflags = []
        stage_extra_cmake_flags = extra_cmake_flags[:]
        # We have compiler-rt and libunwind enabled after stage1 compiler is
        # built.
        if i > 1:
            stage_ldflags.extend([
                '-rtlib=compiler-rt',
                '-unwindlib=libunwind',
            ])
            stage_cxxflags.extend([
                '-stdlib=libc++',
            ])
            if config.thinlto:
                stage_extra_cmake_flags.append('-DLLVM_ENABLE_LTO=Thin')
            prev_stage_install_prefix = builders[i - 1].install_prefix
            cc = os.path.join(prev_stage_install_prefix, 'bin/clang')
            cxx = os.path.join(prev_stage_install_prefix, 'bin/clang++')
            ld = os.path.join(prev_stage_install_prefix, 'bin/ld.lld')
            search_dirs = GetClangSearchDirs(cc, env)['libraries']
            env['LD_LIBRARY_PATH'] = search_dirs
            if i == config.stage:
                for sdir in search_dirs.split(os.pathsep):
                    if not sdir.startswith(prev_stage_install_prefix):
                        continue
                    rpath = os.path.join(
                        '$ORIGIN', os.path.relpath(sdir, os.path.dirname(cc)))
                    stage_ldflags.append(f'-Wl,-rpath={rpath}')
        builder = Builder(
            config.monorepo,
            stage_build_dir,
            stage_install_dir,
            cc=cc,
            cxx=cxx,
            ld=ld,
            cflags=stage_cflags,
            cxxflags=stage_cxxflags,
            ldflags=stage_ldflags,
            projects=[
                'clang',
                'clang-tools-extra',
                'lld',
            ],
            njobs=config.njobs,
            runtimes=runtimes,
            extra_cmake_flags=stage_extra_cmake_flags,
            env=env,
            use_malloc=config.use_malloc,
        )
        builder.ninja_targets = ['install']
        if not config.no_check and i == config.stage:
            builder.ninja_targets.append('check-all')
            if builder.runtimes:
                builder.ninja_targets.append('check-runtimes')
        err = builder.ConfigAndBuild()
        if err != 0:
            logging.error(f'Stage{i} failed.')
            return err
        builders.append(builder)
    # TODO: Compare binaries of stage2 and stage3.
    return CPack(builders[-1].build_dir, config.njobs)


def BuildWithPGOAndLTO(config):
    # TODO: Use llvm/utils/collect_and_build_with_pgo.py to profile.
    llvm_bin_dir = os.path.join(config.llvm_path, 'bin')

    def FindTool(name):
        return shutil.which(name, path=llvm_bin_dir)

    profiling_pass_path = os.path.join(config.build_dir, 'profiling-pass')
    lto_pass_path = os.path.join(config.build_dir, 'lto-pass')
    os.makedirs(profiling_pass_path, exist_ok=True)
    os.makedirs(lto_pass_path, exist_ok=True)
    # LTO pass.
    lto_pass_extra_cmake_flags = ['-DLLVM_ENABLE_LTO=Thin']
    lto_pass_builder = Builder(config.monorepo,
                               lto_pass_path,
                               config.install_prefix,
                               cc=FindTool('clang'),
                               ld=FindTool('ld.lld'),
                               config_only=config.config_only,
                               runtimes=[
                                   'compiler-rt',
                               ],
                               projects=[
                                   'clang',
                                   'lld',
                                   'clang-tools-extra',
                               ],
                               extra_cmake_flags=lto_pass_extra_cmake_flags,
                               njobs=config.njobs)
    err = lto_pass_builder.ConfigAndBuild()
    if err != 0:
        logging.error('LTO pass failed.')
        return err
    return CPack(lto_pass_path, config.njobs)


def UpdateRepo(config):
    env = copy.deepcopy(os.environ)
    if not config.disable_proxy:
        env['https_proxy'] = 'socks5h://localhost:1080'
        # Requires net-analyzer/openbsd-netcat on Gentoo,
        # netcat-openbsd on Debian.
        env['GIT_SSH_COMMAND'] = 'ssh -o ProxyCommand="nc -v -x 127.0.0.1:1080 %h %p"'
    url = 'git@github.com:llvm/llvm-project.git'
    if config.use_https:
        url = 'https://github.com/llvm/llvm-project.git'
    if config.init:
        cmd = ['git', 'clone', url]
        return subprocess.call(cmd, env=env)
    return subprocess.call([
        'git',
        'pull',
        '--recurse-submodules',
    ])


def main():
    parser = argparse.ArgumentParser(
        description='Build Clang/LLVM under different mode.')
    subparsers = parser.add_subparsers(dest='subcmd')
    # Update llvm monorepo.
    repo = subparsers.add_parser('repo',
                                 description='Init and update llvm repo')
    repo.add_argument('--use_https', default=False, action='store_true')
    repo.add_argument('--init', default=False, action='store_true')
    repo.add_argument('--disable_proxy', default=False, action='store_true')
    repo.set_defaults(func=UpdateRepo)

    # Bootstrap build.
    bootstrap = subparsers.add_parser(
        'bootstrap', description='Bootstrap a Clang/LLVM toolchain.')
    AddCommonArguments(bootstrap)
    bootstrap.add_argument('--stage', type=int, default=3)
    bootstrap.add_argument('--stage0_cc', default=shutil.which('gcc'))
    bootstrap.add_argument('--stage0_ld', default=shutil.which('ld'))
    bootstrap.add_argument('--thinlto', action='store_true', default=False)
    bootstrap.add_argument('--native', action='store_true', default=False)
    bootstrap.add_argument('--no_check', action='store_true', default=False)
    bootstrap.add_argument('--llvm_dylib', action='store_true', default=False)
    bootstrap.set_defaults(func=Bootstrap)

    # Dev build.
    dev = subparsers.add_parser('dev',
                                description='Build Clang/LLVM for developing.')
    AddCommonArguments(dev)
    dev.add_argument('--clang', default=shutil.which('clang'))
    dev.add_argument('--lld', default=shutil.which('ld.lld'))
    dev.add_argument('--build_type', default='Release')
    dev.add_argument('--projects', default='clang;lld')
    dev.add_argument('--build_shared_libs', action='store_true', default=False)
    dev.add_argument('--build_rt_atomic', action='store_true', default=False)
    dev.add_argument('--build_runtimes', action='store_true', default=False)
    dev.set_defaults(func=BuildForDev)

    # Prod build.
    prod = subparsers.add_parser(
        'prod', description='Build Clang/LLVM toolchain as product.')
    # See https://clang.llvm.org/docs/Toolchain.html.
    prod.add_argument('--clang', default=shutil.which('clang'))
    prod.add_argument('--lld', default=shutil.which('ld.lld'))
    prod.add_argument('--default_llvm_toolchain',
                      action='store_true',
                      default=False)
    prod.add_argument('--minimal', action='store_true', default=False)
    prod.add_argument('--enable_rt_atomic', action='store_true', default=False)
    prod.add_argument('--lto', action='store_true', default=False)
    prod.add_argument('--native', action='store_true', default=False)
    prod.add_argument('--dylib', action='store_true', default=False)
    prod.add_argument('--binutils_include')
    prod.add_argument('--no_asserts', action='store_true', default=False)
    AddCommonArguments(prod)
    prod.set_defaults(func=BuildProduct)

    # PGO/LTO build.
    opt = subparsers.add_parser(
        'opt', description='Build PGO/LTOed Clang/LLVM toolchain.')
    AddCommonArguments(opt)
    opt.add_argument('--llvm_path', required=True)
    opt.add_argument('--native', action='store_true', default=False)
    opt.add_argument('--skip_profiling_pass',
                     action='store_true',
                     default=False)
    opt.add_argument('--llvm_test_suite_path')
    opt.set_defaults(func=BuildWithPGOAndLTO)

    config = parser.parse_args()
    if not config.subcmd:
        parser.print_help()
        return -1
    return config.func(config)


if __name__ == '__main__':
    sys.exit(main())
