#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import re
import subprocess
import shlex
import shutil
import tempfile
import logging


class Cleaner(object):

    def __init__(self, root):
        self.root = root
        self.sub = {}
        self.parent = {}
        self.non_empty = set()
        self.empty_leaves = set()

    def Prepare(self):
        for current, dirs, files in os.walk(self.root):
            assert (current not in self.sub)
            self.sub[current] = set()
            if not dirs and not files:
                self.empty_leaves.add(current)
                continue
            if files:
                self.non_empty.add(current)
                logging.info(f'{current} is not empty.')
            for d in dirs:
                subdir = os.path.join(current, d)
                self.sub[current].add(subdir)
                if subdir not in self.parent:
                    self.parent[subdir] = set()
                self.parent[subdir].add(current)

    def Clean(self):
        worklist = list(self.empty_leaves)
        while worklist:
            d = worklist.pop()
            os.rmdir(d)
            logging.info(f'Removing {d}')
            if d not in self.parent:
                continue
            for p in self.parent[d]:
                self.sub[p].remove(d)
                if p not in self.non_empty and not self.sub[p]:
                    worklist.append(p)


def main():
    if len(sys.argv) != 2:
        sys.stderr.write(f'Usage: {sys.argv[0]} <root>\n')
        return 1
    logging.basicConfig(level=logging.INFO)
    root = os.path.abspath(sys.argv[1])
    C = Cleaner(root)
    C.Prepare()
    C.Clean()
    return 0


if __name__ == '__main__':
    sys.exit(main())
