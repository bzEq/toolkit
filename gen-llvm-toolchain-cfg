#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
import re
import platform

VERSION_LINE = r'clang version ([0-9]+\.[0-9]+\.[0-9]+)'
TARGET_LINE = r'Target: (.*)'


def GetClangVersionAndTarget(clang_path):
    cmd = [
        clang_path,
        '--version',
    ]
    p = subprocess.run(cmd, capture_output=True)
    output = p.stdout.decode('utf8')
    m = re.search(VERSION_LINE, output)
    if not m:
        return None, None
    version = m.group(1)
    m = re.search(TARGET_LINE, output)
    if not m:
        return None, None
    target = m.group(1)
    return version, target


if __name__ == '__main__':
    if len(sys.argv) != 2:
        sys.stderr.write(f'Usage: {sys.argv[0]} <path_to_clang>\n')
        sys.exit(1)
    clang_path = os.path.abspath(os.path.realpath(sys.argv[1]))
    bin_path = os.path.dirname(clang_path)
    version, target = GetClangVersionAndTarget(clang_path)
    if not version or not target:
        sys.stderr.write("Unable to get clang's version or target.")
        sys.exit(1)
    libdir = os.path.abspath(
        os.path.join(os.path.dirname(clang_path), '../lib'))
    target_libdir = os.path.join(libdir, target)
    rt_libdir = os.path.join(libdir, f'clang/{version}/lib/{target}')
    lld = os.path.join(bin_path, 'ld.lld')
    # Write result to stdout.
    config = f'''\
-pipe
-O3
-march=native
-flto=thin
-rtlib=compiler-rt
-unwindlib=libunwind
-stdlib=libc++
--ld-path={lld}
-Wl,-rpath,{libdir}
-Wl,-rpath,{target_libdir}
-Wl,-rpath,{rt_libdir}
-L{rt_libdir}
-Wl,-as-needed
-l:libclang_rt.atomic.so
-Wl,-no-as-needed
'''
    sys.stdout.write(config)
