#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import shutil
import subprocess
import logging
import shlex


class Builder(object):

    def __init__(self, config):
        self.config = config

    def FindTool(self, name):
        return os.path.abspath(
            shutil.which(name,
                         path=os.path.join(self.config.llvm_build_dir, 'bin')))

    def ConfigAndBuild(self):
        err = self.Config()
        if err != 0:
            return
        return self.Build()

    def Config(self):
        cflags = [
            '-pipe',
            '--ld-path={}'.format(self.FindTool('ld.lld')),
            '-march=native',
        ]
        cxxflags = cflags[:]
        if self.config.cflags:
            cflags.extend(shlex.split(self.config.cflags))
        if self.config.cxxflags:
            cxxflags.extend(shlex.split(self.config.cxxflags))
        cmd = [
            self.config.cmake_binary,
            '-GNinja',
            '-DCMAKE_BUILD_TYPE=Release',
            '-DCMAKE_C_COMPILER={}'.format(self.FindTool('clang')),
            '-DCMAKE_CXX_COMPILER={}'.format(self.FindTool('clang++')),
            '-DCMAKE_C_FLAGS={}'.format(shlex.join(cflags)),
            '-DCMAKE_CXX_FLAGS={}'.format(shlex.join(cxxflags)),
            '-S',
            os.path.abspath(self.config.src_dir),
            '-B',
            os.path.abspath(self.config.build_dir),
        ]
        err = subprocess.call(cmd)
        if err != 0:
            logging.error('cmake failed: {}'.format(cmd))
        return err

    def Build(self):
        cmd = [
            self.config.ninja_binary,
            '-C',
            os.path.abspath(self.config.build_dir),
            '-j{}'.format(self.config.njobs),
        ]
        err = subprocess.call(cmd)
        if err != 0:
            logging.error('ninja failed: {}'.format(cmd))
        return err


def main():
    parser = argparse.ArgumentParser(description='Build LLVM test suite')
    parser.add_argument('--src_dir', required=True)
    parser.add_argument('--build_dir', required=True)
    parser.add_argument('--llvm_build_dir', required=True)
    parser.add_argument('--cmake_binary', default=shutil.which('cmake'))
    parser.add_argument('--ninja_binary', default=shutil.which('ninja'))
    parser.add_argument('--cflags')
    parser.add_argument('--cxxflags')
    parser.add_argument('-j', dest='njobs', type=int, default=os.cpu_count())
    config = parser.parse_args()
    return Builder(config).ConfigAndBuild()


if __name__ == '__main__':
    sys.exit(main())
